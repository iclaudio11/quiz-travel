{"ast":null,"code":"var _jsxFileName = \"/Users/claudioiaculo/quiz-travel/src/components/Quiz.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QuestionCard from '../components/QuestionCard';\nimport FinalScreen from '../components/FinalScreen';\nimport questions from '../questions.json'; // Importa le domande\nimport { getSkillLevel } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = questions.length; // Numero totale di domande\n\nconst App = () => {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Indice della domanda corrente\n  const [score, setScore] = useState(0); // Punteggio\n  const [gameOver, setGameOver] = useState(false); // Indica se il quiz è terminato\n\n  const startQuiz = () => {\n    setGameOver(false); // Inizia il quiz\n  };\n  const handleAnswerClick = answerIndex => {\n    const isCorrect = answerIndex.toString() === questions[currentQuestionIndex].correctAnswer;\n    setScore(prevScore => prevScore + (isCorrect ? 1 : 0));\n    setCurrentQuestionIndex(prevIndex => (prevIndex + 1) % TOTAL_QUESTIONS);\n    if (currentQuestionIndex === TOTAL_QUESTIONS - 1) {\n      setGameOver(true); // Mostra la schermata finale\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Quiz sul Turismo Sostenibile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Metti alla prova le tue conoscenze!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n      questionNumber: currentQuestionIndex + 1 // Numero della domanda\n      ,\n      totalQuestions: TOTAL_QUESTIONS // Numero totale di domande\n      ,\n      question: questions[currentQuestionIndex].question // Testo della domanda\n      ,\n      answers: questions[currentQuestionIndex].answers // Array di risposte\n      ,\n      onAnswerClick: handleAnswerClick // Funzione da richiamare al click su una risposta\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(FinalScreen, {\n      score: score,\n      skillLevel: getSkillLevel(score) // Funzione per ottenere il livello di \"skill\" in base al punteggio\n      ,\n      onRestartClick: startQuiz // Funzione per ricominciare il quiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"f7xHNpRD813GKPeqTT2QQwL28q8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","QuestionCard","FinalScreen","questions","getSkillLevel","jsxDEV","_jsxDEV","TOTAL_QUESTIONS","length","App","_s","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","gameOver","setGameOver","startQuiz","handleAnswerClick","answerIndex","isCorrect","toString","correctAnswer","prevScore","prevIndex","children","Link","to","fileName","_jsxFileName","lineNumber","columnNumber","questionNumber","totalQuestions","question","answers","onAnswerClick","skillLevel","onRestartClick","_c","$RefreshReg$"],"sources":["/Users/claudioiaculo/quiz-travel/src/components/Quiz.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport QuestionCard from '../components/QuestionCard';\nimport FinalScreen from '../components/FinalScreen';\nimport questions from '../questions.json'; // Importa le domande\nimport { getSkillLevel } from '../utils';\n\nconst TOTAL_QUESTIONS = questions.length; // Numero totale di domande\n\nconst App: React.FC = () => {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Indice della domanda corrente\n  const [score, setScore] = useState(0); // Punteggio\n  const [gameOver, setGameOver] = useState(false); // Indica se il quiz è terminato\n\n  const startQuiz = () => {\n    setGameOver(false); // Inizia il quiz\n  };\n\n  const handleAnswerClick = (answerIndex: number) => {\n    const isCorrect = answerIndex.toString() === questions[currentQuestionIndex].correctAnswer;\n\n    setScore((prevScore) => (prevScore + (isCorrect ? 1 : 0)));\n    setCurrentQuestionIndex((prevIndex) => (prevIndex + 1) % TOTAL_QUESTIONS);\n\n    if (currentQuestionIndex === TOTAL_QUESTIONS - 1) {\n      setGameOver(true); // Mostra la schermata finale\n    }\n  };\n\n  return (\n    <div>\n    <Link to=\"/\">\n      <h1>Quiz sul Turismo Sostenibile</h1>\n    </Link>\n      <p>Metti alla prova le tue conoscenze!</p>\n      {!gameOver && (\n        <QuestionCard\n          questionNumber={currentQuestionIndex + 1} // Numero della domanda\n          totalQuestions={TOTAL_QUESTIONS} // Numero totale di domande\n          question={questions[currentQuestionIndex].question} // Testo della domanda\n          answers={questions[currentQuestionIndex].answers} // Array di risposte\n          onAnswerClick={handleAnswerClick} // Funzione da richiamare al click su una risposta\n        />\n      )}\n      {gameOver && (\n        <FinalScreen\n          score={score}\n          skillLevel={getSkillLevel(score)} // Funzione per ottenere il livello di \"skill\" in base al punteggio\n          onRestartClick={startQuiz} // Funzione per ricominciare il quiz\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}