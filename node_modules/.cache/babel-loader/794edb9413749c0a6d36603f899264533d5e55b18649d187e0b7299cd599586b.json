{"ast":null,"code":"var _jsxFileName = \"/Users/claudioiaculo/quiz-travel/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QuestionCard from './components/QuestionCard'; // Importa il componente QuestionCard\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10; // Numero totale di domande\n\nfunction App() {\n  _s();\n  const [questions] = useState([{\n    question: \"Qual è la capitale della Francia?\",\n    answers: [\"Parigi\", \"Londra\", \"Berlino\", \"Roma\"],\n    correctAnswer: \"Parigi\" // Assicurati che sia una stringa\n  }\n  // Aggiungi altre domande qui\n  ]);\n  const [number, setNumber] = useState(0); // Indice della domanda corrente\n  const [userAnswers, setUserAnswers] = useState([]); // Array di risposte dell'utente\n  const [score, setScore] = useState(0); // Punteggio\n  const [gameOver, setGameOver] = useState(true); // Indica se il quiz è terminato\n\n  const startQuiz = () => {\n    setGameOver(false); // Inizia il quiz\n  };\n  const checkAnswer = e => {\n    const selectedAnswer = e.target.value; // Valore del pulsante selezionato\n    const isCorrect = selectedAnswer === questions[number].correctAnswer; // Controlla se la risposta è corretta\n\n    if (isCorrect) {\n      setScore(prevScore => prevScore + 1); // Aumenta il punteggio\n    }\n\n    // Visualizza feedback all'utente (es: messaggio di risposta corretta/sbagliata)\n\n    setUserAnswers(prevAnswers => {\n      const newAnswers = [...prevAnswers]; // Crea una copia dell'array di risposte\n      newAnswers[number] = selectedAnswer; // Aggiorna la risposta all'indice corrente\n      return newAnswers;\n    });\n  };\n  const nextQuestion = () => {\n    setNumber(prevNumber => (prevNumber + 1) % TOTAL_QUESTIONS); // Passa alla prossima domanda\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"QUIZ IN ITALIANO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start\",\n      onClick: startQuiz,\n      children: \"Inizia\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"score\",\n      children: [\"Punteggio: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), !gameOver &&\n    /*#__PURE__*/\n    // Mostra la domanda solo se il quiz non è terminato\n    _jsxDEV(QuestionCard, {\n      questionNumber: number + 1 // Numero della domanda\n      ,\n      totalQuestions: TOTAL_QUESTIONS // Numero totale di domande\n      ,\n      question: questions[number].question // Testo della domanda\n      ,\n      answers: questions[number].answers // Array di risposte\n      ,\n      userAnswer: userAnswers[number] // Risposta dell'utente\n      ,\n      callback: checkAnswer // Funzione da richiamare al click su una risposta\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Fine del quiz! Il tuo punteggio \\xE8 \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 20\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next\",\n      onClick: nextQuestion,\n      children: \"Prossima domanda\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"awwJET72jblXho5Iuj6tr56RzOM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","QuestionCard","jsxDEV","_jsxDEV","TOTAL_QUESTIONS","App","_s","questions","question","answers","correctAnswer","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","checkAnswer","e","selectedAnswer","target","value","isCorrect","prevScore","prevAnswers","newAnswers","nextQuestion","prevNumber","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","questionNumber","totalQuestions","userAnswer","callback","_c","$RefreshReg$"],"sources":["/Users/claudioiaculo/quiz-travel/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport QuestionCard from './components/QuestionCard'; // Importa il componente QuestionCard\n\nconst TOTAL_QUESTIONS = 10; // Numero totale di domande\n\nfunction App() {\n  const [questions] = useState([\n    {\n      question: \"Qual è la capitale della Francia?\",\n      answers: [\"Parigi\", \"Londra\", \"Berlino\", \"Roma\"],\n      correctAnswer: \"Parigi\", // Assicurati che sia una stringa\n    },\n    // Aggiungi altre domande qui\n  ]);\n\n  const [number, setNumber] = useState(0); // Indice della domanda corrente\n  const [userAnswers, setUserAnswers] = useState([]); // Array di risposte dell'utente\n  const [score, setScore] = useState(0); // Punteggio\n  const [gameOver, setGameOver] = useState(true); // Indica se il quiz è terminato\n\n  const startQuiz = () => {\n    setGameOver(false); // Inizia il quiz\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const selectedAnswer = (e.target as HTMLButtonElement).value; // Valore del pulsante selezionato\n    const isCorrect = selectedAnswer === questions[number].correctAnswer; // Controlla se la risposta è corretta\n\n    if (isCorrect) {\n      setScore((prevScore) => prevScore + 1); // Aumenta il punteggio\n    }\n\n    // Visualizza feedback all'utente (es: messaggio di risposta corretta/sbagliata)\n\n    setUserAnswers((prevAnswers) => {\n      const newAnswers = [...prevAnswers]; // Crea una copia dell'array di risposte\n      newAnswers[number] = selectedAnswer; // Aggiorna la risposta all'indice corrente\n      return newAnswers;\n    });\n  };\n\n  const nextQuestion = () => {\n    setNumber((prevNumber) => (prevNumber + 1) % TOTAL_QUESTIONS); // Passa alla prossima domanda\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>QUIZ IN ITALIANO</h1>\n      <button className=\"start\" onClick={startQuiz}>Inizia</button>\n      <p className=\"score\">Punteggio: {score}</p>\n      {!gameOver && ( // Mostra la domanda solo se il quiz non è terminato\n        <QuestionCard\n          questionNumber={number + 1} // Numero della domanda\n          totalQuestions={TOTAL_QUESTIONS} // Numero totale di domande\n          question={questions[number].question} // Testo della domanda\n          answers={questions[number].answers} // Array di risposte\n          userAnswer={userAnswers[number]} // Risposta dell'utente\n          callback={checkAnswer} // Funzione da richiamare al click su una risposta\n        />\n      )}\n      {gameOver && <p>Fine del quiz! Il tuo punteggio è {score}</p>}\n      {!gameOver && <button className=\"next\" onClick={nextQuestion}>Prossima domanda</button>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}