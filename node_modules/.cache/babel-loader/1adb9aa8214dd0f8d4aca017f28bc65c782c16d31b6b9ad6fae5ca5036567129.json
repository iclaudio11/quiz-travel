{"ast":null,"code":"var _jsxFileName = \"/Users/claudioiaculo/quiz-travel/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10;\nfunction App() {\n  _s();\n  const [questions] = useState([{\n    question: \"Qual è la capitale della Francia?\",\n    answers: [\"Parigi\", \"Londra\", \"Berlino\", \"Roma\"],\n    correctAnswer: 0\n  }\n  // Aggiungi altre domande qui\n  ]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const startQuiz = () => {\n    setGameOver(false);\n  };\n  const checkAnswer = e => {\n    const selectedAnswer = e.target.value;\n    const isCorrect = selectedAnswer === questions[number].correctAnswer;\n    if (isCorrect) {\n      setScore(prevScore => prevScore + 1);\n    }\n\n    // Visualizza feedback all'utente (es: messaggio di risposta corretta/sbagliata)\n\n    setUserAnswers(prevAnswers => {\n      const newAnswers = [...prevAnswers];\n      newAnswers[number] = selectedAnswer;\n      return newAnswers;\n    });\n  };\n  const nextQuestion = () => {\n    setNumber(prevNumber => (prevNumber + 1) % TOTAL_QUESTIONS);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"REACT QUIZ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start\",\n      onClick: startQuiz,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"score\",\n      children: [\"Punteggio: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n      questionNumber: number + 1,\n      totalQuestions: TOTAL_QUESTIONS,\n      question: questions[number].question,\n      answers: questions[number].answers,\n      userAnswer: userAnswers[number],\n      callback: checkAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Fine del quiz! Il tuo punteggio \\xE8 \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 20\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next\",\n      onClick: nextQuestion,\n      children: \"Prossima domanda\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"n+YSRYjorfcQg4DI+V17iiIRLB4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TOTAL_QUESTIONS","App","_s","questions","question","answers","correctAnswer","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","checkAnswer","e","selectedAnswer","target","value","isCorrect","prevScore","prevAnswers","newAnswers","nextQuestion","prevNumber","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","QuestionCard","questionNumber","totalQuestions","userAnswer","callback","_c","$RefreshReg$"],"sources":["/Users/claudioiaculo/quiz-travel/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  const [questions] = useState([\n    {\n      question: \"Qual è la capitale della Francia?\",\n      answers: [\"Parigi\", \"Londra\", \"Berlino\", \"Roma\"],\n      correctAnswer: 0,\n    },\n    // Aggiungi altre domande qui\n  ]);\n\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startQuiz = () => {\n    setGameOver(false);\n  };\n\n  const checkAnswer = (e) => {\n    const selectedAnswer = e.target.value;\n    const isCorrect = selectedAnswer === questions[number].correctAnswer;\n\n    if (isCorrect) {\n      setScore((prevScore) => prevScore + 1);\n    }\n\n    // Visualizza feedback all'utente (es: messaggio di risposta corretta/sbagliata)\n\n    setUserAnswers((prevAnswers) => {\n      const newAnswers = [...prevAnswers];\n      newAnswers[number] = selectedAnswer;\n      return newAnswers;\n    });\n  };\n\n  const nextQuestion = () => {\n    setNumber((prevNumber) => (prevNumber + 1) % TOTAL_QUESTIONS);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>REACT QUIZ</h1>\n      <button className=\"start\" onClick={startQuiz}>Start</button>\n      <p className=\"score\">Punteggio: {score}</p>\n      {!gameOver && <QuestionCard\n        questionNumber={number + 1}\n        totalQuestions={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={userAnswers[number]}\n        callback={checkAnswer}\n      />}\n      {gameOver && <p>Fine del quiz! Il tuo punteggio è {score}</p>}\n      {!gameOver && <button className=\"next\" onClick={nextQuestion}>Prossima domanda</button>}\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}